generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  fullName             String
  email                String                 @unique
  password             String?
  role                 UserRole               @default(USER)
  isVerified           Boolean                @default(false)
  profilePicture       String?
  referralCode         String?                @unique
  referredById         Int?
  provider             String?
  providerId           String?
  addresses            Address[]
  carts                Cart[]
  orders               Order[]
  orderStatusLogs      OrderStatusLog[]       @relation("ChangedBy")
  wasReferredLogs      ReferralLog[]          @relation("ReferredLogs")
  referralLogs         ReferralLog[]          @relation("ReferrerLogs")
  StoreAdminAssignment StoreAdminAssignment[]
  referredBy           User?                  @relation("UserReferrer", fields: [referredById], references: [id])
  referredUsers        User[]                 @relation("UserReferrer")
  userVouchers         UserVoucher[]
  voucherUsageLogs     VoucherUsageLog[]
}

model Store {
  id        Int                    @id @default(autoincrement())
  name      String
  address   String
  latitude  Float
  longitude Float
  createdAt DateTime               @default(now())
  carts     Cart[]
  discounts Discount[]
  journals  InventoryJournal[]
  orders    Order[]
  products  Stock[]
  admins    StoreAdminAssignment[]
}

model StoreAdminAssignment {
  id      Int   @id @default(autoincrement())
  userId  Int
  storeId Int
  store   Store @relation(fields: [storeId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  basePrice        Int
  categoryId       Int
  createdAt        DateTime           @default(now())
  cartItems        CartItem[]
  discounts        Discount[]
  InventoryJournal InventoryJournal[]
  orderItems       OrderItem[]
  category         ProductCategory    @relation(fields: [categoryId], references: [id])
  images           ProductImage[]
  stocks           Stock[]
  Voucher          Voucher[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])
}

model Stock {
  id        Int     @id @default(autoincrement())
  storeId   Int
  productId Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  store     Store   @relation(fields: [storeId], references: [id])
}

model InventoryJournal {
  id        Int      @id @default(autoincrement())
  productId Int
  storeId   Int
  type      String
  quantity  Int
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
}

model Discount {
  id          Int          @id @default(autoincrement())
  storeId     Int
  productId   Int?
  type        DiscountType
  minPurchase Int?
  maxDiscount Int?
  value       String
  startDate   DateTime
  endDate     DateTime
  product     Product?     @relation(fields: [productId], references: [id])
  store       Store        @relation(fields: [storeId], references: [id])
}

model Voucher {
  id                  Int               @id @default(autoincrement())
  code                String            @unique
  type                VoucherType
  value               Int
  maxDiscount         Int?
  applicableProductId Int?
  minSpending         Int?
  startDate           DateTime
  endDate             DateTime
  usageLimit          Int?
  isActive            Boolean           @default(true)
  orders              Order[]
  userVouchers        UserVoucher[]
  applicableProduct   Product?          @relation(fields: [applicableProductId], references: [id])
  usageLogs           VoucherUsageLog[]
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUsed    Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  voucher   Voucher @relation(fields: [voucherId], references: [id])
}

model VoucherUsageLog {
  id        Int              @id @default(autoincrement())
  userId    Int
  voucherId Int
  orderId   Int?
  status    VoucherUseStatus
  usedAt    DateTime         @default(now())
  order     Order?           @relation(fields: [orderId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  voucher   Voucher          @relation(fields: [voucherId], references: [id])
}

model Address {
  id          Int     @id @default(autoincrement())
  userId      Int
  label       String
  recipient   String
  phone       String
  addressLine String
  city        String
  province    String
  postalCode  String
  latitude    Float
  longitude   Float
  isMain      Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  Order       Order[]
}

model Cart {
  id      Int        @id @default(autoincrement())
  userId  Int
  storeId Int
  store   Store      @relation(fields: [storeId], references: [id])
  user    User       @relation(fields: [userId], references: [id])
  items   CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id            Int               @id @default(autoincrement())
  userId        Int
  storeId       Int
  addressId     Int
  totalPrice    Int
  shippingCost  Int
  voucherId     Int?
  paymentMethod String
  status        OrderStatus
  createdAt     DateTime          @default(now())
  address       Address           @relation(fields: [addressId], references: [id])
  store         Store             @relation(fields: [storeId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  voucher       Voucher?          @relation(fields: [voucherId], references: [id])
  items         OrderItem[]
  statusLogs    OrderStatusLog[]
  paymentProof  PaymentProof?
  voucherLog    VoucherUsageLog[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  imageUrl   String
  uploadedAt DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id])
}

model OrderStatusLog {
  id             Int         @id @default(autoincrement())
  orderId        Int
  previousStatus OrderStatus
  newStatus      OrderStatus
  changedById    Int?
  note           String?
  changedAt      DateTime    @default(now())
  changedBy      User?       @relation("ChangedBy", fields: [changedById], references: [id])
  order          Order       @relation(fields: [orderId], references: [id])
}

model ReferralLog {
  id             Int                @id @default(autoincrement())
  referredUserId Int
  referrerUserId Int
  rewardType     ReferralRewardType
  rewardDetail   String
  createdAt      DateTime           @default(now())
  referredUser   User               @relation("ReferredLogs", fields: [referredUserId], references: [id])
  referrerUser   User               @relation("ReferrerLogs", fields: [referrerUserId], references: [id])
}

enum UserRole {
  USER
  STORE_ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  WAITING_CONFIRMATION
  PROCESSED
  SHIPPED
  CONFIRMED
  CANCELED
}

enum ReferralRewardType {
  VOUCHER
  POINT
  DISCOUNT
}

enum DiscountType {
  PERCENTAGE
  NOMINAL
  BUY1GET1
}

enum VoucherType {
  PRODUCT
  CART
  SHIPPING
}

enum VoucherUseStatus {
  USED
  EXPIRED
  CANCELED
}
